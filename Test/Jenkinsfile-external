#!groovy


String repoUrl = 'https://github.com/raspberrypi/rpi-imager.git'
String repoBranch = 'qml' // scm.userRemoteConfigs[0].branch

String[] architectures = ['amd64', 'aarch64', 'armhf']
String[] distributions = ['debian:bullseye', 'debian:bookworm', 'ubuntu:focal', 'ubuntu:jammy'] // 'debian:buster'

String imageVendor = 'vitexsoftware'
String distribution = ''
String architecture = ''
String distroCodename = ''
String ver = ''

properties([
    copyArtifactPermission('*')
])
node() {
    ansiColor('xterm') {
        stage('SCM Checkout') {
            checkout([$class: 'GitSCM', branches: [[name: '*/' + repoBranch ]], extensions: [], userRemoteConfigs: [[url: repoUrl]]])
            def control = readFile(file:  env.WORKSPACE + '/debian/control')
            def lines = control.readLines()
            for (line in lines) {
                if (line.trim()) {
                    def (key,value) = line.split(': ').collect { it.trim() }
                    if (key == 'Architecture') {
                        if (value == 'any') {
                            architectures = ['amd64', 'armhf', 'aarch64']
                        } else {
                            architectures = [value]
                        }
                    }
                }
            }
        }
    }
}

architectures.each {
    architecture = it

    println 'Arch: ' + architecture

    distributions.each {
        distribution = it

        println  'Dist:' + distribution

        def String dist = distribution.split(':')
        //      distroFamily = dist[0]
        distroCodename = dist[1]

        def String buildImage = ''

        node(architecture) {
            ansiColor('xterm') {
                stage('Checkout ' + architecture + ' ' + distribution) {
                    buildImage = docker.image(imageVendor + '/' + distribution)
                    sh 'cd ' + env.WORKSPACE + '; ls -la; pwd'
                    sh 'git checkout debian/changelog'
                    def String pkgVer = sh(
                        script: 'dpkg-parsechangelog --show-field Version',
                        returnStdout: true
                    ).trim()
                    ver = pkgVer + '~' + distroCodename + '~' + env.BUILD_NUMBER
                }
                stage('Build ' + architecture + ' ' + distribution) {
                    buildImage.inside {
                        sh 'dch -b -v ' + ver  + ' "' + env.BUILD_TAG  + '"'
                        sh 'sudo apt-get update --allow-releaseinfo-change'
                        //                        sh 'sudo apt install -y libgnutls28-dev'
                        sh 'sudo chown jenkins:jenkins ..'
                        sh 'debuild-pbuilder  -i -us -uc -b'
                        sh 'mkdir -p $WORKSPACE/dist/debian/ ; rm -rf $WORKSPACE/dist/debian/* ; for deb in $(cat debian/files | awk \'{print $1}\'); do mv "../$deb" $WORKSPACE/dist/debian/; done'
                    }
                }

                stage('Test ' + architecture + ' ' + distribution) {
                    buildImage.inside {
                        def debconf_debug = 0 //Set to "5" or "developer" to debug debconf
                        sh 'cd $WORKSPACE/dist/debian/ ; dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz; cd $WORKSPACE'
                        sh 'echo "deb [trusted=yes] file://///$WORKSPACE/dist/debian/ ./" | sudo tee /etc/apt/sources.list.d/local.list'
                        sh 'sudo apt-get update --allow-releaseinfo-change'
                        sh 'echo "INSTALATION"'
                        sh 'IFS="\n\b"; for package in  `ls $WORKSPACE/dist/debian/ | grep .deb | grep -v dbgsym | awk -F_ \'{print \$1}\'` ; do  echo -e "${GREEN} installing ${package} on `lsb_release -sc` ${ENDCOLOR} " ; sudo  DEBIAN_FRONTEND=noninteractive DEBCONF_DEBUG=' + debconf_debug  + ' apt-get -y install $package ; echo "test now";  done;'
                        stash includes: 'dist/**', name: 'dist-' + distroCodename
                    }
                }
                stage('Copy artifacts ' + architecture + ' ' + distribution ) {
                    buildImage.inside {
                        sh 'mv $WORKSPACE/dist/debian/*.deb $WORKSPACE'
                    }
                }
            }
        }
    }
}
